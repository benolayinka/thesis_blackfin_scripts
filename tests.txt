//Using all examples from Programming Reference

//ALU
R3.H = R1.H + R2.L (NS) ;
R3 = R1 +|- R2 (S) ; 
R3 = R0 +|+ R1, R2 = R0 -|- R1 (S) ;
R3 = R1 + R2 (NS) ; 
P3 = P1 + SP ; 
R3 = R1 + R2, R4 = R1 - R2 (NS); 
R3 = A0 + A1, R4 = A0 - A1 (S); 

//MAC The three MACs (MAC10, MAC0 and MAC1) perform fixed-point multiplication and multiply-accumulate operations. Multiply-accumulate operations are available with either cumulative addition or cumulative subtraction.
A1 = R1 (X), A0 = R0 (X); /* sign-extend R1:0 into A1:0 */
A1 = R1 (Z), A0 = R0 (Z); /* zero-extend R1:0 into A1:0 */
A1 = A0 = 0; /* A1:0 = 0 */
A1:0 += R2 * R3 ;
R0 = R1 * R2 (FU) ;
R1 = R2 * R3 (IU, NS) ;
R1:0 = R1 * R2 ;
R1 = cmul(R2, R3) ;
R1 = cmul(R2, R3)(IS);
R1:0 = cmul(R2, R3) ;
R0 *= R1 ;
A1 += R3.H * R4.H ; 
R0.L = R1.L * R2.L (FU) ;
R0.H = R2.H * R3.H (IU) ;
R0 = R1.L * R2.L ; 
A1 += R1.H * R2.L, A0 += R1.L * R2.H ; 
R3.H = (A1 += R1.H * R2.L), R3.L = (A0 += R1.L * R2.L) ;
R3 = (A1 += R1.H * R2.L), R2 = (A0 += R1.L * R2.L) ;
R3.H = (A1 += R1.H * R2.L), A0 += R1.L * R2.L ;

//SHIFT The shifter provides bitwise shifting functions for 16-, 32-, or 40-bit inputs, yielding a 16-, 32-, or 40-bit output. These functions include arithmetic shift, logical shift, rotate, and various bit test, set, pack, unpack, and exponent detection functions.
R0 >>= 0x04 ;
R0 <<= 0x04 ;
R0 <<= R2 ;
R1.H = R0.L << 0x04 ; // Perform left shift by 4
R1 = LSHIFT R0 by R2.L ; // Perform shift
R1 = ASHIFT R0 by R2.L ; // Perform shift
R1 = ROT R0 by R2.L ; // Perform rotation
BITCLR ( R0, 6 ) ; 
BITSET ( R2, 9 ) ; // Sets bit 9 of R2
BITTGL ( R3, 2 ) ; // Toggles bit 2 of R3
CC = BITTST ( R3, 0 ) ; // Puts bit 0 of R3 in ASTAT.CC
R3 = EXTRACT ( R0 , R1.L ) ( Z ) ; // R3 = 0x00000ABB
R3 = EXTRACT ( R0 , R1.L ) ( X ) ; // R3 = 0xFFFFFABB
R3 = DEPOSIT ( R0 , R1 ) ; // R3 = 0xA333CCDD
R3 = DEPOSIT ( R0 , R1 ) ( X ) ; // R3 = 0x0333CCDD
R2 = PACK(R0.L, R0.H); /* R2 = 0x33441122 */
R3 = PACK(R1.L, R0.H); /* R3 = 0x77881122 */
R4 = BYTEPACK(R0, R1); /* R4 = 0x66882244 */
(R6, R7) = BYTEUNPACK R1:0;

//MOVE
R3 = [P0];
R3 = [I0];
R0 = [ P3 ];
R0.L = W [ I3 ]; //ben removed post inc
R0 = B [ P3 ] (Z) ; //removed post inc
R0 = [ I2 ] ;
R0.H = W [ I2 ] ;
[ P1 ] = R0 ;
B [ P1 ] = R0 ;
R0 = W[P1] (Z) ; /* R0 = 0x0000 8080 */
R1 = W[P1] (X) ; /* R1 = 0xFFFF 8080 */
R2 = B[P1] (Z) ; /* R2 = 0x0000 0080 */
R3 = B[P1] (X) ; /* R3 = 0xFFFF FF80 */
// R0 = [P1 + 0x11] ; //Doesn't work Operands don't fit instruction template 'REG ASSIGN LBRACK REG PLUS expr RBRACK'.
R0 = W [ P1 ] (Z) ; //
R0 = [ I2 ] ; //ben removed post
//[ --SP ] = R0;
// R5 = [ P1++P2 ] ; //protection violation
// R2 = W [ P4++P5 ] (Z) ;
// R2 = [ I2++M1 ] ;
// [ 0x100 ] = SP ;

//OTHER
STI R5 ;
CLI R5 ;

//JUMP
//IF CC JUMP dest_address ;
//IF !CC JUMP other_addr ;
//JUMP;
//JUMP.L;
//CALL;
//RTS;
//RTE;
//LSETUP;

//NOP
NOP;
MNOP;

//IDLE
//IDLE;

//PARALLEL
R5 = R0 + R1(ns) || R2 = [P2] || R3 = [I1] ; //ben decrement
a0 = r3.h * r2.l || r1 = [p3] || r4 = [i2] ;
a0 = r3.h * r2.l , a1 = r3.l * r2.h ;
R5 = R0 + R1(ns) || R2 = [P2] || R3 = [I1] ;
MNOP || R2 = [I0] || R3 = [I1] ;
R5 = R2 + R3 (NS) || R2 = [I0] || R3 = [I1] ;
R7 = R5 + R7 (NS) || [I0] = R5;
A0 = 0 || R0.H = W[I0] || R1.L = W[I1];
A0+= R0.H * R1.L || R0.H = W[I0] || R1.L = W[I1];